import { expect, it } from 'vitest'
import { getNoteFromMarkdown } from '../src/lib'
import { markdown } from '../src/lib/utilities/string'
import { permute } from './utilities/permute'

// Function to remove undefined fields from an object
function stripUndefinedFields<T extends Record<string, unknown>>(object: T): T {
	return Object.fromEntries(Object.entries(object).filter(([_, v]) => v !== undefined)) as T
}

async function getNotesFromMarkdown(
	markdownVariations: string[],
	showOriginal = true,
): Promise<
	Array<{
		back?: string
		front: string
		original?: string
		type: string
	}>
> {
	const results: Array<{
		back?: string
		front: string
		original?: string
		type: string
	}> = []
	for (const markdown of markdownVariations) {
		const note = await getNoteFromMarkdown(markdown)
		results.push(
			stripUndefinedFields({
				back:
					note.fields.Back.length > 0
						? note.fields.Back.split('\n').slice(2, -1).join('\n')
						: undefined,
				front: note.fields.Front.split('\n').slice(2, -1).join('\n'),
				original: showOriginal ? markdown : undefined,
				type: note.modelName,
			}),
		)
	}

	return results
}

it('detects single cloze deletions in markdown', async () => {
	const validVariations = [
		'~~cloze content~~',
		' ~~cloze content~~ ',
		'~~_cloze content_~~',
		'~~**cloze content**~~',
		String.raw`~~$$ \sigma $$~~`,
		'~~[Link](https://example.com)~~',
		'~~![Tiny](https://storage.kitschpatrol.com/example-image-1)~~',
		'Some stuff before, then ~~cloze content~~',
		'Some stuff before, then ~~cloze content~~ and then some stuff after.',
		'Some stuff before, then ~~cloze content~~ and then some stuff after.',
		'# Heading\n\nSome stuff before, then ~~cloze content~~ and then some stuff after.\n\n---\n\nExtra',
	]

	const invalidVariations = [
		'~~ cloze content ~~',
		'~~cloze content ~~',
		'~~This is a \n\n multiline cloze deletion~~',
	]

	const validNotes = await getNotesFromMarkdown(validVariations)
	const invalidNotes = await getNotesFromMarkdown(invalidVariations)

	expect(validNotes).toMatchSnapshot()

	expect(invalidNotes).toMatchSnapshot()
})

it('detects multiple cloze deletions in markdown', async () => {
	const validVariations = [
		'~~cloze content~~ ~~cloze content~~',
		'Some stuff before, then ~~cloze content~~ and more ~~cloze content~~ and then some stuff after.',
		'Some stuff before, then ~~cloze content~~\n\nand more ~~cloze content~~ and then some stuff after.',
		'Some stuff before, then ~~cloze content~~\n\nand more ~~cloze content~~ and then some stuff after.\n\n---\n\nExtra',
	]

	const validNotes = await getNotesFromMarkdown(validVariations)

	expect(validNotes).toMatchSnapshot()
})

it('detects cloze hints in markdown', async () => {
	const validVariations = [
		'~~cloze content _hint_~~ ~~cloze content *hint*~~',
		'~~_cloze content_        _hint_~~',
		'~~_cloze content_ _**hint**_~~',
	]

	const invalidVariations = [
		'~~_cloze content_~~',
		'~~_cloze content_ _not hint_ not a hint~~',
		'~~_cloze content_ **_hint_**~~',
	]

	const validNotes = await getNotesFromMarkdown(validVariations)
	const invalidNotes = await getNotesFromMarkdown(invalidVariations)

	expect(validNotes).toMatchSnapshot()

	expect(invalidNotes).toMatchSnapshot()
})

it('treats leading digits as cloze numbers', async () => {
	const validVariations = permute(
		'~~',
		['(0)', '(1)', '(42)', '0 ', '1 ', '42 ', '0|', '1|', '42|', '0.', '1.', '42.'],
		[' ', '', '  ', ' 3', '3', ')', '|', '.'],
		['cloze content', '**cloze content**'],
		[' _hint_', ''],
		'~~',
	)

	const invalidVariations = [
		'~~**2** cloze content~~',
		'~~**2 cloze** content~~',
		'~~2cloze content~~',
		'~~-2 cloze content~~',
		'~~-1.4 cloze content~~',
		'~~(2)~~', // Should cloze the number, not set the cloze number
		'~~2|~~', // Should cloze the number, not set the cloze number
		'~~2~~', // Should cloze the number, not set the cloze number
		'~~0~~', // Should cloze the number, not set the cloze number
		'~~123~~', // Should cloze the number, not set the cloze number
	]

	const validNotes = await getNotesFromMarkdown(validVariations)
	const invalidNotes = await getNotesFromMarkdown(invalidVariations)

	expect(validNotes).toMatchSnapshot()
	expect(invalidNotes).toMatchSnapshot()
})

it('follows the strict line break markdown spec by default', async () => {
	const markdownSingleBreak = 'This is line 1.\nThis is line 2.\nThis is line 3.\n'
	const singleBreakNote = await getNoteFromMarkdown(markdownSingleBreak)
	expect(singleBreakNote.fields.Front).toMatchInlineSnapshot(`
		"<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
		<div class="yanki namespace-yanki front model-yanki-basic">
		<p>
		  This is line 1.
		  This is line 2.
		  This is line 3.
		</p>
		</div>"
	`)

	const markdownDoubleBreak = 'This is line 1.\n\nThis is line 2.\n\nThis is line 3.\n\n'
	const doubleBreakNote = await getNoteFromMarkdown(markdownDoubleBreak)
	expect(doubleBreakNote.fields.Front).toMatchInlineSnapshot(`
		"<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
		<div class="yanki namespace-yanki front model-yanki-basic">
		<p>This is line 1.</p>
		<p>This is line 2.</p>
		<p>This is line 3.</p>
		</div>"
	`)
})

it('disables the strict line break markdown spec if requested', async () => {
	const markdownSingleBreak = 'This is line 1.\nThis is line 2.\nThis is line 3.\n'
	const singleBreakNote = await getNoteFromMarkdown(markdownSingleBreak, {
		strictLineBreaks: false,
	})
	expect(singleBreakNote.fields.Front).toMatchInlineSnapshot(`
		"<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
		<div class="yanki namespace-yanki front model-yanki-basic">
		<p>This is line 1.<br>This is line 2.<br>This is line 3.</p>
		</div>"
	`)

	const markdownDoubleBreak = 'This is line 1.\n\nThis is line 2.\n\nThis is line 3.\n\n'
	const doubleBreakNote = await getNoteFromMarkdown(markdownDoubleBreak, {
		strictLineBreaks: false,
	})
	expect(doubleBreakNote.fields.Front).toMatchInlineSnapshot(`
		"<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
		<div class="yanki namespace-yanki front model-yanki-basic">
		<p>This is line 1.</p>
		<p>This is line 2.</p>
		<p>This is line 3.</p>
		</div>"
	`)
})

it('handles large numeric cloze tables', async () => {
	// Generic big table example...
	const markdownTable = markdown`
		| **Ã—**  | **1**  | **2**  | **3**  | **4**  | **5**  | **6**  | **7**  | **8**  | **9**   | **10**  | **11**  | **12**  |
		| ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------- | ------- | ------- | ------- |
		| **1**  | ~~1~~  | ~~2~~  | ~~3~~  | ~~4~~  | ~~5~~  | ~~6~~  | ~~7~~  | ~~8~~  | ~~9~~   | ~~10~~  | ~~11~~  | ~~12~~  |
		| **2**  | ~~2~~  | ~~4~~  | ~~6~~  | ~~8~~  | ~~10~~ | ~~12~~ | ~~14~~ | ~~16~~ | ~~18~~  | ~~20~~  | ~~22~~  | ~~24~~  |
		| **3**  | ~~3~~  | ~~6~~  | ~~9~~  | ~~12~~ | ~~15~~ | ~~18~~ | ~~21~~ | ~~24~~ | ~~27~~  | ~~30~~  | ~~33~~  | ~~36~~  |
		| **4**  | ~~4~~  | ~~8~~  | ~~12~~ | ~~16~~ | ~~20~~ | ~~24~~ | ~~28~~ | ~~32~~ | ~~36~~  | ~~40~~  | ~~44~~  | ~~48~~  |
		| **5**  | ~~5~~  | ~~10~~ | ~~15~~ | ~~20~~ | ~~25~~ | ~~30~~ | ~~35~~ | ~~40~~ | ~~45~~  | ~~50~~  | ~~55~~  | ~~60~~  |
		| **6**  | ~~6~~  | ~~12~~ | ~~18~~ | ~~24~~ | ~~30~~ | ~~36~~ | ~~42~~ | ~~48~~ | ~~54~~  | ~~60~~  | ~~66~~  | ~~72~~  |
		| **7**  | ~~7~~  | ~~14~~ | ~~21~~ | ~~28~~ | ~~35~~ | ~~42~~ | ~~49~~ | ~~56~~ | ~~63~~  | ~~70~~  | ~~77~~  | ~~84~~  |
		| **8**  | ~~8~~  | ~~16~~ | ~~24~~ | ~~32~~ | ~~40~~ | ~~48~~ | ~~56~~ | ~~64~~ | ~~72~~  | ~~80~~  | ~~88~~  | ~~96~~  |
		| **9**  | ~~9~~  | ~~18~~ | ~~27~~ | ~~36~~ | ~~45~~ | ~~54~~ | ~~63~~ | ~~72~~ | ~~81~~  | ~~90~~  | ~~99~~  | ~~108~~ |
		| **10** | ~~10~~ | ~~20~~ | ~~30~~ | ~~40~~ | ~~50~~ | ~~60~~ | ~~70~~ | ~~80~~ | ~~90~~  | ~~100~~ | ~~110~~ | ~~120~~ |
		| **11** | ~~11~~ | ~~22~~ | ~~33~~ | ~~44~~ | ~~55~~ | ~~66~~ | ~~77~~ | ~~88~~ | ~~99~~  | ~~110~~ | ~~121~~ | ~~132~~ |
		| **12** | ~~12~~ | ~~24~~ | ~~36~~ | ~~48~~ | ~~60~~ | ~~72~~ | ~~84~~ | ~~96~~ | ~~108~~ | ~~120~~ | ~~132~~ | ~~144~~ |
	`

	const note = await getNoteFromMarkdown(markdownTable)
	expect(note).toMatchSnapshot()
})

// https://github.com/kitschpatrol/yanki-obsidian/issues/38
it('handles link aliases in tables and surplus pipes like in obsidian', async () => {
	const markdownSample = `

# Valid

[[yanki video.mp4]]

[[yanki video.mp4|]]

[[yanki video.mp4|15:33]]

[[yanki video.mp4|15:33| | |yes]]

[[yanki video.mp4\\|15:33]]

[[yanki video.mp4|15:33|yes]]

[[yanki video.mp4|15:33\\|yes]]

[[yanki video.mp4#t=15:33.01|15:33]]

![[test image.jpg]]

![[test image.jpg|200]]

![[test image.jpg\\|200]]

[[      ]]

[[[]]]

[[[[]]]]

[[\\]]

[[\\\\]]

[[\\\\|]]

# Invalid

[[]]

[[|label only]]

[[\\|]]


# Table Escapes

| Link                                   |
| -------------------------------------- |
| [[yanki \\video.mp4\\|15:\\33]]        |
| [[yanki video.mp4]]                    |
| [[yanki video.mp4\\|15:33]]            |
| [[yanki video.mp4#t=15:33.01\\|15:33]] |
| ![[test image.jpg]]                    |
| ![[test image.jpg\\|200]]              |
| [[\\|]]                                |
| [[\\\\|]]                              |
`

	const note = await getNoteFromMarkdown(markdownSample, {
		obsidianVault: 'Vault',
		resolveUrls: false,
		syncMediaAssets: 'off',
	})

	/* Spell-checker: disable */

	expect(note.fields.Front).toMatchInlineSnapshot(`
		"<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
		<div class="yanki namespace-yanki front model-yanki-basic">
		<h1>Valid</h1>
		<p><a href="yanki%20video.mp4">yanki video.mp4</a></p>
		<p><a href="yanki%20video.mp4">yanki video.mp4</a></p>
		<p><a href="yanki%20video.mp4">15:33</a></p>
		<p><a href="yanki%20video.mp4">15:33 yes</a></p>
		<p><a href="yanki%20video.mp4">15:33</a></p>
		<p><a href="yanki%20video.mp4">15:33yes</a></p>
		<p><a href="yanki%20video.mp4">15:33yes</a></p>
		<p><a href="yanki%20video.mp4#t=15:33.01">15:33</a></p>
		<p>
		  <span class="yanki-media yanki-media-unsupported" data-yanki-media-src="test%20image.jpg" data-yanki-media-sync="false" data-yanki-src="test%20image.jpg"><a href="test%20image.jpg">undefined</a></span>
		</p>
		<p>
		  <span class="yanki-media yanki-media-unsupported" data-yanki-alt-text="200" data-yanki-media-src="test%20image.jpg" data-yanki-media-sync="false" data-yanki-src="test%20image.jpg"><a href="test%20image.jpg">undefined</a></span>
		</p>
		<p>
		  <span class="yanki-media yanki-media-unsupported" data-yanki-alt-text="200" data-yanki-media-src="test%20image.jpg" data-yanki-media-sync="false" data-yanki-src="test%20image.jpg"><a href="test%20image.jpg">undefined</a></span>
		</p>
		<p><a href="%20%20%20%20%20%20"></a></p>
		<p><a href="%5B">[</a>]</p>
		<p><a href="%5B%5B">[[</a>]]</p>
		<p><a href="%5C">\\</a></p>
		<p><a href="%5C">\\</a></p>
		<p><a href="%5C">\\</a></p>
		<h1>Invalid</h1>
		<p>[[]]</p>
		<p>[[|label only]]</p>
		<p>[[|]]</p>
		<h1>Table Escapes</h1>
		<table>
		  <thead>
		    <tr>
		      <th>Link</th>
		    </tr>
		  </thead>
		  <tbody>
		    <tr>
		      <td><a href="yanki%20%5Cvideo.mp4">15:\\33</a></td>
		    </tr>
		    <tr>
		      <td><a href="yanki%20video.mp4">yanki video.mp4</a></td>
		    </tr>
		    <tr>
		      <td><a href="yanki%20video.mp4">15:33</a></td>
		    </tr>
		    <tr>
		      <td><a href="yanki%20video.mp4#t=15:33.01">15:33</a></td>
		    </tr>
		    <tr>
		      <td>
		        <span class="yanki-media yanki-media-unsupported" data-yanki-media-src="test%20image.jpg" data-yanki-media-sync="false" data-yanki-src="test%20image.jpg"><a href="test%20image.jpg">undefined</a></span>
		      </td>
		    </tr>
		    <tr>
		      <td>
		        <span class="yanki-media yanki-media-unsupported" data-yanki-alt-text="200" data-yanki-media-src="test%20image.jpg" data-yanki-media-sync="false" data-yanki-src="test%20image.jpg"><a href="test%20image.jpg">undefined</a></span>
		      </td>
		    </tr>
		    <tr>
		      <td>[[|]]</td>
		    </tr>
		    <tr>
		      <td>[[\\</td>
		    </tr>
		  </tbody>
		</table>
		</div>"
	`)

	/* Spell-checker: enable */
})
