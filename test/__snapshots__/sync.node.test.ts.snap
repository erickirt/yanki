// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`basic synchronization > synchronizes notes to anki and has the correct deck name 1`] = `
{
  "ankiWeb": false,
  "deletedDecks": [],
  "deletedMedia": [],
  "dryRun": false,
  "duration": 0,
  "namespace": "Yanki Test - b9918cfa0f62798d",
  "synced": [
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-and-reversed-card-with-no-back.md",
      "filePathOriginal": "/test-minimal-notes/basic-and-reversed-card-with-no-back.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH back model-yanki-basic-and-reversed-card"><p><em>(Empty)</em></p></div>",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic-and-reversed-card">
<p>I'm a <strong>question</strong> to which there is no answer.</p>
</div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Basic (and reversed card)",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-and-reversed-card-with-no-front.md",
      "filePathOriginal": "/test-minimal-notes/basic-and-reversed-card-with-no-front.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH back model-yanki-basic-and-reversed-card">
<p>I'm an <strong>answer</strong> to which there is no question.</p>
</div>",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic-and-reversed-card"><p><em>(Empty)</em></p><!-- This is tricky, if the very first two lines are \`---\` and \`---\` then assume it's empty frontmatter. But if there's a space first, as will be generated from this comment, then assume it's an empty "front" of a basic (and reversed card) note. --></div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Basic (and reversed card)",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-and-reversed-card.md",
      "filePathOriginal": "/test-minimal-notes/basic-and-reversed-card.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH back model-yanki-basic-and-reversed-card">
<p>I'm an <strong>answer</strong> which is sometimes the question</p>
</div>",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic-and-reversed-card">
<p>I'm <em>question</em> which is sometimes the answer</p>
</div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Basic (and reversed card)",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-type-in-the-answer-with-empty-frontmatter.md",
      "filePathOriginal": "/test-minimal-notes/basic-type-in-the-answer-with-empty-frontmatter.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH back model-yanki-basic-type-in-the-answer">I'm the thing you need to type on the card</div>",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic-type-in-the-answer">
<p>I'm the prompt</p>
<p></p>
</div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Basic (type in the answer)",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-type-in-the-answer-with-frontmatter.md",
      "filePathOriginal": "/test-minimal-notes/basic-type-in-the-answer-with-frontmatter.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH back model-yanki-basic-type-in-the-answer">I'm the thing you need to type on the card</div>",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic-type-in-the-answer">
<p>I'm the prompt</p>
<p></p>
</div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Basic (type in the answer)",
        "noteId": 0,
        "tags": [
          "orange",
        ],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-type-in-the-answer-with-multiple-emphasis-and-ignored-answer-style.md",
      "filePathOriginal": "/test-minimal-notes/basic-type-in-the-answer-with-multiple-emphasis-and-ignored-answer-style.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH back model-yanki-basic-type-in-the-answer">I'm the thing you <strong>need</strong> to type on the card</div>",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic-type-in-the-answer">
<p>I'm the prompt</p>
<p><em>I'm actually also part of the prompt!</em></p>
</div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Basic (type in the answer)",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-type-in-the-answer-with-multiple-emphasis.md",
      "filePathOriginal": "/test-minimal-notes/basic-type-in-the-answer-with-multiple-emphasis.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH back model-yanki-basic-type-in-the-answer">I'm the thing you need to type on the card</div>",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic-type-in-the-answer">
<p>I'm the prompt</p>
<p><em>I'm actually also part of the prompt!</em></p>
</div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Basic (type in the answer)",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-type-in-the-answer.md",
      "filePathOriginal": "/test-minimal-notes/basic-type-in-the-answer.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH back model-yanki-basic-type-in-the-answer">I'm the thing you need to type on the card</div>",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic-type-in-the-answer">
<p>I'm the prompt</p>
<p></p>
</div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Basic (type in the answer)",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-with-back-and-no-front-with-empty-frontmatter.md",
      "filePathOriginal": "/test-minimal-notes/basic-with-back-and-no-front-with-empty-frontmatter.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH back model-yanki-basic">
<p>I'm the back of the card</p>
<p>I have no front.</p>
</div>",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic"><p><em>(Empty)</em></p></div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-with-back-and-no-front.md",
      "filePathOriginal": "/test-minimal-notes/basic-with-back-and-no-front.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH back model-yanki-basic">
<p>I'm the back of the card</p>
<p>I have no front.</p>
</div>",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic"><p><em>(Empty)</em></p></div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-with-cloze-like-back-and-no-front.md",
      "filePathOriginal": "/test-minimal-notes/basic-with-cloze-like-back-and-no-front.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH back model-yanki-basic">
<p>This looks a lot like a <del>cloze</del> but it's a basic answer.</p>
</div>",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic"><p><em>(Empty)</em></p></div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-with-empty-everything.md",
      "filePathOriginal": "/test-minimal-notes/basic-with-empty-everything.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic"><p><em>(Empty)</em></p></div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-with-empty-frontmatter.md",
      "filePathOriginal": "/test-minimal-notes/basic-with-empty-frontmatter.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>My frontmatter is empty.</p>
</div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-with-front-and-cloze-like-back.md",
      "filePathOriginal": "/test-minimal-notes/basic-with-front-and-cloze-like-back.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH back model-yanki-basic">
<p>This looks a lot like a <del>cloze</del> or <del>two <em>here's a hint</em></del>.</p>
</div>",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>I'm the question</p>
</div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-with-front-and-no-back.md",
      "filePathOriginal": "/test-minimal-notes/basic-with-front-and-no-back.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>I'm the front of the card</p>
<p>I have no back.</p>
</div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-with-front-image-markdown-embedand-no-back.md",
      "filePathOriginal": "/test-minimal-notes/basic-with-front-image-markdown-embedand-no-back.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>
  <img src="https://storage.kitschpatrol.com/example-image-1.jpeg" alt="" data-yanki-src-original="https://storage.kitschpatrol.com/example-image-1.jpeg" class="yanki-media yanki-media-image" data-yanki-media-src="https://storage.kitschpatrol.com/example-image-1.jpeg" data-yanki-media-sync="false">
</p>
</div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-with-front-image-wiki-embed-and-no-back copy.md",
      "filePathOriginal": "/test-minimal-notes/basic-with-front-image-wiki-embed-and-no-back copy.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>
  <img src="https://storage.kitschpatrol.com/example-image-1.jpeg" data-yanki-src-original="https://storage.kitschpatrol.com/example-image-1.jpeg" class="yanki-media yanki-media-image" data-yanki-media-src="https://storage.kitschpatrol.com/example-image-1.jpeg" data-yanki-media-sync="false" alt="">
</p>
</div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-with-type-in-the-answer-like-back-and-no-front.md",
      "filePathOriginal": "/test-minimal-notes/basic-with-type-in-the-answer-like-back-and-no-front.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH back model-yanki-basic">
<p><em>I look a lot like the thing you need to type in, but i'm just a back-only emphasized note.</em></p>
</div>",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic"><p><em>(Empty)</em></p></div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-with-type-in-the-answer-like-front-and-no-back.md",
      "filePathOriginal": "/test-minimal-notes/basic-with-type-in-the-answer-like-front-and-no-back.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH back model-yanki-basic"><p><em>(Empty)</em></p></div>",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p><em>I look a lot like the thing you need to type in, but i'm just a front-only emphasized note.</em></p>
</div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-with-type-in-the-answer-like-single-line-with-empty-frontmatter.md",
      "filePathOriginal": "/test-minimal-notes/basic-with-type-in-the-answer-like-single-line-with-empty-frontmatter.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p><em>I look a lot like the thing you need to type in, but i'm just a front-only emphasized note.</em></p>
</div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-with-type-in-the-answer-like-single-line-with-frontmatter.md",
      "filePathOriginal": "/test-minimal-notes/basic-with-type-in-the-answer-like-single-line-with-frontmatter.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p><em>I look a lot like the thing you need to type in, but i'm just a front-only emphasized note.</em></p>
</div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [
          "orange",
        ],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-with-type-in-the-answer-like-single-line.md",
      "filePathOriginal": "/test-minimal-notes/basic-with-type-in-the-answer-like-single-line.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p><em>I look a lot like the thing you need to type in, but i'm just a front-only emphasized note.</em></p>
</div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic.md",
      "filePathOriginal": "/test-minimal-notes/basic.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH back model-yanki-basic">
<p>I'm the back of the card</p>
</div>",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>I'm the front of the card</p>
</div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/cloze-with-extra-empty.md",
      "filePathOriginal": "/test-minimal-notes/cloze-with-extra-empty.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-cloze">
<p>This card has a {{c1::cloze}} or {{c2::two ::<em>here's a hint</em>}}.</p>
</div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Cloze",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/cloze-with-extra.md",
      "filePathOriginal": "/test-minimal-notes/cloze-with-extra.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH back model-yanki-cloze">
<p>And some extra stuff.</p>
</div>",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-cloze">
<p>This card has a {{c1::cloze}} or {{c2::two ::<em>here's a hint</em>}}.</p>
</div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Cloze",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/cloze-with-no-preamble.md",
      "filePathOriginal": "/test-minimal-notes/cloze-with-no-preamble.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-cloze">
<p>{{c1::cloze}} is the {{c2::start of the card ::<em>here's a hint</em>}}.</p>
</div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Cloze",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/cloze-with-nothing-else.md",
      "filePathOriginal": "/test-minimal-notes/cloze-with-nothing-else.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-cloze">
<p>{{c1::a lonely cloze}}</p>
</div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Cloze",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/cloze-with-style.md",
      "filePathOriginal": "/test-minimal-notes/cloze-with-style.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-cloze">
<p>This card has a {{c1::<em>emphasized but un-hinted cloze</em>}} {{c2::<strong>cloze</strong> with style}} or {{c3::two}} and {{c4::plus another::<em>a really <strong>bold</strong> hint</em>}}.</p>
<p>{{c5::All}} will be {{c6::revealed ::<em>here's a hint: "shown"</em>}}.</p>
</div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Cloze",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/cloze.md",
      "filePathOriginal": "/test-minimal-notes/cloze.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-cloze">
<p>This card has a {{c1::cloze}} or {{c2::two ::<em>here's a hint</em>}}.</p>
</div>",
          "YankiNamespace": "Yanki Test - b9918cfa0f62798d",
        },
        "modelName": "Yanki - Cloze",
        "noteId": 0,
        "tags": [],
      },
    },
  ],
}
`;

exports[`complex trees > makes the right decisions about deck naming with a file in the root 2`] = `
{
  "ankiWeb": false,
  "deletedDecks": [],
  "deletedMedia": [],
  "dryRun": false,
  "duration": 0,
  "namespace": "Yanki Test - b5346192b9b2fb82",
  "synced": [
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-note/basic.md",
      "filePathOriginal": "/test-complex-tree-root-note/basic.md",
      "note": {
        "deckName": "test-complex-tree-root-note",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>I should be in the deck 'solo-note'</p>
</div>",
          "YankiNamespace": "Yanki Test - b5346192b9b2fb82",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-note/deep-contiguous/basic.md",
      "filePathOriginal": "/test-complex-tree-root-note/deep-contiguous/basic.md",
      "note": {
        "deckName": "test-complex-tree-root-note::deep-contiguous",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>I should be in the deck 'deep-contiguous'</p>
</div>",
          "YankiNamespace": "Yanki Test - b5346192b9b2fb82",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-note/deep-contiguous/within/basic.md",
      "filePathOriginal": "/test-complex-tree-root-note/deep-contiguous/within/basic.md",
      "note": {
        "deckName": "test-complex-tree-root-note::deep-contiguous::within",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>I should be in the deck 'another'</p>
</div>",
          "YankiNamespace": "Yanki Test - b5346192b9b2fb82",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [
          "mdank",
          "yes",
        ],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-note/deep-contiguous/within/within/basic.md",
      "filePathOriginal": "/test-complex-tree-root-note/deep-contiguous/within/within/basic.md",
      "note": {
        "deckName": "test-complex-tree-root-note::deep-contiguous::within::within",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>I should be in the deck 'another'</p>
</div>",
          "YankiNamespace": "Yanki Test - b5346192b9b2fb82",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [
          "mdank",
          "yes",
        ],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-note/deep-contiguous/within/within/within/basic.md",
      "filePathOriginal": "/test-complex-tree-root-note/deep-contiguous/within/within/within/basic.md",
      "note": {
        "deckName": "test-complex-tree-root-note::deep-contiguous::within::within::within",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>I should be in the deck 'within'</p>
</div>",
          "YankiNamespace": "Yanki Test - b5346192b9b2fb82",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [
          "mdank",
          "yes",
        ],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-note/deep-island/within/within/within/basic.md",
      "filePathOriginal": "/test-complex-tree-root-note/deep-island/within/within/within/basic.md",
      "note": {
        "deckName": "test-complex-tree-root-note::deep-island::within::within::within",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>I should be in the deck 'within'</p>
</div>",
          "YankiNamespace": "Yanki Test - b5346192b9b2fb82",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-note/deep-non-contiguous/within/within/basic.md",
      "filePathOriginal": "/test-complex-tree-root-note/deep-non-contiguous/within/within/basic.md",
      "note": {
        "deckName": "test-complex-tree-root-note::deep-non-contiguous::within::within",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>I should be in the deck 'within'</p>
</div>",
          "YankiNamespace": "Yanki Test - b5346192b9b2fb82",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-note/sibling-folders/brother/basic.md",
      "filePathOriginal": "/test-complex-tree-root-note/sibling-folders/brother/basic.md",
      "note": {
        "deckName": "test-complex-tree-root-note::sibling-folders::brother",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>I should be in the deck 'brother'</p>
</div>",
          "YankiNamespace": "Yanki Test - b5346192b9b2fb82",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [
          "mdank",
          "yes",
        ],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-note/sibling-folders/sister/basic.md",
      "filePathOriginal": "/test-complex-tree-root-note/sibling-folders/sister/basic.md",
      "note": {
        "deckName": "test-complex-tree-root-note::sibling-folders::sister",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>I should be in the deck 'sister'</p>
</div>",
          "YankiNamespace": "Yanki Test - b5346192b9b2fb82",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [
          "mdank",
          "yes",
        ],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-note/solo-note/basic.md",
      "filePathOriginal": "/test-complex-tree-root-note/solo-note/basic.md",
      "note": {
        "deckName": "test-complex-tree-root-note::solo-note",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>I should be in the deck 'solo-note'</p>
</div>",
          "YankiNamespace": "Yanki Test - b5346192b9b2fb82",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
  ],
}
`;

exports[`complex trees > makes the right decisions about deck naming without a file in the root 2`] = `
{
  "ankiWeb": false,
  "deletedDecks": [],
  "deletedMedia": [],
  "dryRun": false,
  "duration": 0,
  "namespace": "Yanki Test - b5346192b9b2fb82",
  "synced": [
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-bare/deep-contiguous/basic.md",
      "filePathOriginal": "/test-complex-tree-root-bare/deep-contiguous/basic.md",
      "note": {
        "deckName": "deep-contiguous",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>I should be in the deck 'deep-contiguous'</p>
</div>",
          "YankiNamespace": "Yanki Test - b5346192b9b2fb82",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-bare/deep-contiguous/within/basic.md",
      "filePathOriginal": "/test-complex-tree-root-bare/deep-contiguous/within/basic.md",
      "note": {
        "deckName": "deep-contiguous::within",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>I should be in the deck 'another'</p>
</div>",
          "YankiNamespace": "Yanki Test - b5346192b9b2fb82",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [
          "mdank",
          "yes",
        ],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-bare/deep-contiguous/within/within/basic.md",
      "filePathOriginal": "/test-complex-tree-root-bare/deep-contiguous/within/within/basic.md",
      "note": {
        "deckName": "deep-contiguous::within::within",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>I should be in the deck 'another'</p>
</div>",
          "YankiNamespace": "Yanki Test - b5346192b9b2fb82",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [
          "mdank",
          "yes",
        ],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-bare/deep-contiguous/within/within/within/basic.md",
      "filePathOriginal": "/test-complex-tree-root-bare/deep-contiguous/within/within/within/basic.md",
      "note": {
        "deckName": "deep-contiguous::within::within::within",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>I should be in the deck 'within'</p>
</div>",
          "YankiNamespace": "Yanki Test - b5346192b9b2fb82",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [
          "mdank",
          "yes",
        ],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-bare/deep-island/within/within/within/basic.md",
      "filePathOriginal": "/test-complex-tree-root-bare/deep-island/within/within/within/basic.md",
      "note": {
        "deckName": "deep-island::within::within::within",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>I should be in the deck 'within'</p>
</div>",
          "YankiNamespace": "Yanki Test - b5346192b9b2fb82",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-bare/deep-non-contiguous/within/within/basic.md",
      "filePathOriginal": "/test-complex-tree-root-bare/deep-non-contiguous/within/within/basic.md",
      "note": {
        "deckName": "deep-non-contiguous::within::within",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>I should be in the deck 'within'</p>
</div>",
          "YankiNamespace": "Yanki Test - b5346192b9b2fb82",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-bare/sibling-folders/brother/basic.md",
      "filePathOriginal": "/test-complex-tree-root-bare/sibling-folders/brother/basic.md",
      "note": {
        "deckName": "sibling-folders::brother",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>I should be in the deck 'brother'</p>
</div>",
          "YankiNamespace": "Yanki Test - b5346192b9b2fb82",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [
          "mdank",
          "yes",
        ],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-bare/sibling-folders/sister/basic.md",
      "filePathOriginal": "/test-complex-tree-root-bare/sibling-folders/sister/basic.md",
      "note": {
        "deckName": "sibling-folders::sister",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>I should be in the deck 'sister'</p>
</div>",
          "YankiNamespace": "Yanki Test - b5346192b9b2fb82",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [
          "mdank",
          "yes",
        ],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-bare/solo-note/basic.md",
      "filePathOriginal": "/test-complex-tree-root-bare/solo-note/basic.md",
      "note": {
        "deckName": "solo-note",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>I should be in the deck 'solo-note'</p>
</div>",
          "YankiNamespace": "Yanki Test - b5346192b9b2fb82",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
  ],
}
`;

exports[`duplicate node ids > handles duplicate node ids for notes with different content gracefully 1`] = `
{
  "ankiWeb": false,
  "deletedDecks": [],
  "deletedMedia": [],
  "dryRun": false,
  "duration": 0,
  "namespace": "Yanki Test - 00e8048e96c5000c",
  "synced": [
    {
      "action": "created",
      "filePath": "/test-duplicate-node-ids/basic.md",
      "filePathOriginal": "/test-duplicate-node-ids/basic.md",
      "note": {
        "deckName": "test-duplicate-node-ids",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>Replace me</p>
</div>",
          "YankiNamespace": "Yanki Test - 00e8048e96c5000c",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
  ],
}
`;

exports[`fancy markdown > handles fancy markdown 1`] = `
{
  "ankiWeb": false,
  "deletedDecks": [],
  "deletedMedia": [],
  "dryRun": false,
  "duration": 0,
  "namespace": "Yanki Test - 4b7d855f1825e39f",
  "synced": [
    {
      "action": "created",
      "filePath": "/test-fancy-markdown/autolinks.md",
      "filePathOriginal": "/test-fancy-markdown/autolinks.md",
      "note": {
        "deckName": "test-fancy-markdown",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p><a href="https://ericmika.com" data-yanki-src-original="https://ericmika.com">https://ericmika.com</a></p>
</div>",
          "YankiNamespace": "Yanki Test - 4b7d855f1825e39f",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-fancy-markdown/gfm-tables.md",
      "filePathOriginal": "/test-fancy-markdown/gfm-tables.md",
      "note": {
        "deckName": "test-fancy-markdown",
        "fields": {
          "Back": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH back model-yanki-basic-and-reversed-card">
<h2>2</h2>
<table>
  <thead>
    <tr>
      <th align="center">abc</th>
      <th align="right">bla</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align="center">bar</td>
      <td align="right">baz</td>
    </tr>
  </tbody>
</table>
<hr>
<h2>3</h2>
<table>
  <thead>
    <tr>
      <th>abc</th>
      <th>def</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>bar</td>
      <td>baz</td>
    </tr>
  </tbody>
</table>
<hr>
<h2>4</h2>
<table>
  <thead>
    <tr>
      <th>abc</th>
      <th>def</th>
    </tr>
  </thead>
</table>
<hr>
<p>And I'm the back</p>
</div>",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic-and-reversed-card">
<h1>GFM Tables</h1>
<h2>1</h2>
<table>
  <thead>
    <tr>
      <th>foo</th>
      <th>bar</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>baz</td>
      <td>bim</td>
    </tr>
  </tbody>
</table>
</div>",
          "YankiNamespace": "Yanki Test - 4b7d855f1825e39f",
        },
        "modelName": "Yanki - Basic (and reversed card)",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-fancy-markdown/gh-admonitions.md",
      "filePathOriginal": "/test-fancy-markdown/gh-admonitions.md",
      "note": {
        "deckName": "test-fancy-markdown",
        "fields": {
          "Back": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH back model-yanki-basic">
<div class="admonition">
  <p class="admonition-title">TIP</p>
  <p>Nothing more</p>
</div>
<div class="admonition">
  <p class="admonition-title">WARNING</p>
  <p>I'm not liable</p>
</div>
</div>",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<div class="admonition">
  <p class="admonition-title">CAUTION</p>
  <p>Be careful</p>
</div>
<div class="admonition">
  <p class="admonition-title">IMPORTANT</p>
  <p>So, so important</p>
</div>
<div class="admonition">
  <p class="admonition-title">NOTE</p>
  <p>How meta</p>
</div>
</div>",
          "YankiNamespace": "Yanki Test - 4b7d855f1825e39f",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-fancy-markdown/highlights.md",
      "filePathOriginal": "/test-fancy-markdown/highlights.md",
      "note": {
        "deckName": "test-fancy-markdown",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>This note has a <mark class="flexible-marker flexible-marker-default">highlighted</mark> statement.</p>
</div>",
          "YankiNamespace": "Yanki Test - 4b7d855f1825e39f",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-fancy-markdown/images.md",
      "filePathOriginal": "/test-fancy-markdown/images.md",
      "note": {
        "deckName": "test-fancy-markdown",
        "fields": {
          "Back": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH back model-yanki-basic-and-reversed-card">
<p>
  <img src="https://storage.kitschpatrol.com/example-image-2.jpeg" alt="tiny" data-yanki-src-original="https://storage.kitschpatrol.com/example-image-2.jpeg" class="yanki-media yanki-media-image" data-yanki-media-src="https://storage.kitschpatrol.com/example-image-2.jpeg" data-yanki-media-sync="false">
</p>
</div>",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic-and-reversed-card">
<p>
  <img src="https://storage.kitschpatrol.com/example-image-1.jpeg" alt="tiny" data-yanki-src-original="https://storage.kitschpatrol.com/example-image-1.jpeg" class="yanki-media yanki-media-image" data-yanki-media-src="https://storage.kitschpatrol.com/example-image-1.jpeg" data-yanki-media-sync="false">
</p>
</div>",
          "YankiNamespace": "Yanki Test - 4b7d855f1825e39f",
        },
        "modelName": "Yanki - Basic (and reversed card)",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-fancy-markdown/mathjax-display-line-break.md",
      "filePathOriginal": "/test-fancy-markdown/mathjax-display-line-break.md",
      "note": {
        "deckName": "test-fancy-markdown",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>Display "block" MathJax with line breaks follows:</p>
<anki-mathjax block="true">\\mathbf{a}^{(1)} = \\sigma(\\mathbf{W} \\mathbf{a}^{(0)} + \\mathbf{b})</anki-mathjax>
</div>",
          "YankiNamespace": "Yanki Test - 4b7d855f1825e39f",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-fancy-markdown/mathjax-display-only-front.md",
      "filePathOriginal": "/test-fancy-markdown/mathjax-display-only-front.md",
      "note": {
        "deckName": "test-fancy-markdown",
        "fields": {
          "Back": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH back model-yanki-basic">
<p>There have been issues when the front of the card is only MathJax, but only when math rendering happens in Remark instead of Anki.</p>
</div>",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>
  <anki-mathjax>\\mathbf{a}^{(1)} = \\sigma(\\mathbf{W} \\mathbf{a}^{(0)} + \\mathbf{b})</anki-mathjax>
</p>
</div>",
          "YankiNamespace": "Yanki Test - 4b7d855f1825e39f",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-fancy-markdown/mathjax-display.md",
      "filePathOriginal": "/test-fancy-markdown/mathjax-display.md",
      "note": {
        "deckName": "test-fancy-markdown",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>Display "block" MathJax follows:</p>
<p>
  <anki-mathjax>\\mathbf{a}^{(1)} = \\sigma(\\mathbf{W} \\mathbf{a}^{(0)} + \\mathbf{b})</anki-mathjax>
</p>
</div>",
          "YankiNamespace": "Yanki Test - 4b7d855f1825e39f",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-fancy-markdown/mathjax-fence.md",
      "filePathOriginal": "/test-fancy-markdown/mathjax-fence.md",
      "note": {
        "deckName": "test-fancy-markdown",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p><strong>The Cauchy-Schwarz Inequality</strong></p>
<anki-mathjax block="true">\\left( \\sum_{k=1}^n a_k b_k \\right)^2 \\leq \\left( \\sum_{k=1}^n a_k^2 \\right) \\left( \\sum_{k=1}^n b_k^2 \\right)</anki-mathjax>
</div>",
          "YankiNamespace": "Yanki Test - 4b7d855f1825e39f",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-fancy-markdown/mathjax-inline.md",
      "filePathOriginal": "/test-fancy-markdown/mathjax-inline.md",
      "note": {
        "deckName": "test-fancy-markdown",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>This is some "inline" MathJax 
  <anki-mathjax>\\mathbf{a}^{(1)} = \\sigma(\\mathbf{W} \\mathbf{a}^{(0)} + \\mathbf{b})</anki-mathjax> and it really falls in line.
</p>
</div>",
          "YankiNamespace": "Yanki Test - 4b7d855f1825e39f",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-fancy-markdown/mermaid.md",
      "filePathOriginal": "/test-fancy-markdown/mermaid.md",
      "note": {
        "deckName": "test-fancy-markdown",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>This note has a Mermaid flowchart, which is NOT supported.</p>
<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">graph TD;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  A-->B;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  A-->C;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  B-->D;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  C-->D;</span></span>
<span class="line"></span></code></pre>
</div>",
          "YankiNamespace": "Yanki Test - 4b7d855f1825e39f",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-fancy-markdown/obsidian-wiki-links.md",
      "filePathOriginal": "/test-fancy-markdown/obsidian-wiki-links.md",
      "note": {
        "deckName": "test-fancy-markdown",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>Let's link to Obsidian:</p>
<p><a href="/test-fancy-markdown/Technology/Languages/TypeScript/Tackling%20TypeScript%20Book%20Notes" data-yanki-src-original="Technology/Languages/TypeScript/Tackling%20TypeScript%20Book%20Notes">Tackling TypeScript Book Notes</a></p>
<p><a href="/test-fancy-markdown/Technology/Languages/TypeScript/TypeScript%20Cheat%20Sheets%20Notes" data-yanki-src-original="Technology/Languages/TypeScript/TypeScript%20Cheat%20Sheets%20Notes">TypeScript Cheat Sheets Notes</a></p>
<p><a href="/test-fancy-markdown/Technology/Languages/TypeScript/TypeScript%20Cheat%20Sheets%20Notes" data-yanki-src-original="Technology/Languages/TypeScript/TypeScript%20Cheat%20Sheets%20Notes">Technology/Languages/TypeScript/TypeScript Cheat Sheets Notes</a></p>
<p><a href="/test-fancy-markdown/Technology/Languages/TypeScript/TypeScript" data-yanki-src-original="Technology/Languages/TypeScript/TypeScript#Working%20with%20the%20AST">TypeScript</a></p>
<p><a href="/test-fancy-markdown/Technology/Languages/TypeScript/TypeScript" data-yanki-src-original="Technology/Languages/TypeScript/TypeScript#Working%20with%20the%20AST">Working with the AST</a></p>
</div>",
          "YankiNamespace": "Yanki Test - 4b7d855f1825e39f",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-fancy-markdown/syntax-highlighting-code-fence-only-front.md",
      "filePathOriginal": "/test-fancy-markdown/syntax-highlighting-code-fence-only-front.md",
      "note": {
        "deckName": "test-fancy-markdown",
        "fields": {
          "Back": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH back model-yanki-basic">
<p>I'm the back</p>
</div>",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">export</span><span style="color:#D73A49;--shiki-dark:#F97583"> function</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> emptyIsUndefined</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">text</span><span style="color:#D73A49;--shiki-dark:#F97583">:</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="color:#D73A49;--shiki-dark:#F97583"> |</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span><span style="color:#D73A49;--shiki-dark:#F97583">:</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="color:#D73A49;--shiki-dark:#F97583"> |</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (text </span><span style="color:#D73A49;--shiki-dark:#F97583">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> undefined</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> text.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">trim</span><span style="color:#24292E;--shiki-dark:#E1E4E8">() </span><span style="color:#D73A49;--shiki-dark:#F97583">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> ''</span><span style="color:#D73A49;--shiki-dark:#F97583"> ?</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="color:#D73A49;--shiki-dark:#F97583"> :</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> text</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span></code></pre>
</div>",
          "YankiNamespace": "Yanki Test - 4b7d855f1825e39f",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-fancy-markdown/syntax-highlighting-code-fence.md",
      "filePathOriginal": "/test-fancy-markdown/syntax-highlighting-code-fence.md",
      "note": {
        "deckName": "test-fancy-markdown",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>My code block has nice syntax highlighting.</p>
<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">export</span><span style="color:#D73A49;--shiki-dark:#F97583"> function</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> emptyIsUndefined</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">text</span><span style="color:#D73A49;--shiki-dark:#F97583">:</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="color:#D73A49;--shiki-dark:#F97583"> |</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span><span style="color:#D73A49;--shiki-dark:#F97583">:</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="color:#D73A49;--shiki-dark:#F97583"> |</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (text </span><span style="color:#D73A49;--shiki-dark:#F97583">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> undefined</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> text.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">trim</span><span style="color:#24292E;--shiki-dark:#E1E4E8">() </span><span style="color:#D73A49;--shiki-dark:#F97583">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> ''</span><span style="color:#D73A49;--shiki-dark:#F97583"> ?</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="color:#D73A49;--shiki-dark:#F97583"> :</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> text</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span></code></pre>
</div>",
          "YankiNamespace": "Yanki Test - 4b7d855f1825e39f",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-fancy-markdown/syntax-highlighting-unspecified.md",
      "filePathOriginal": "/test-fancy-markdown/syntax-highlighting-unspecified.md",
      "note": {
        "deckName": "test-fancy-markdown",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>My code block has no syntax highlighting.</p>
<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span>export function emptyIsUndefined(text: string | undefined): string | undefined {</span></span>
<span class="line"><span>  if (text === undefined) {</span></span>
<span class="line"><span>    return undefined</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  return text.trim() === '' ? undefined : text</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span></code></pre>
</div>",
          "YankiNamespace": "Yanki Test - 4b7d855f1825e39f",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-fancy-markdown/syntax-highlighting-unsupported.md",
      "filePathOriginal": "/test-fancy-markdown/syntax-highlighting-unsupported.md",
      "note": {
        "deckName": "test-fancy-markdown",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>My code block has no syntax highlighting.</p>
<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span># My Document Title</span></span>
<span class="line"><span>## group name (optional)</span></span>
<span class="line"><span>- 2023 A full year event.</span></span>
<span class="line"><span>  - 2023-01~2023-03 subevent</span></span>
<span class="line"><span>  - 2023-05~2023-08 subevent 2</span></span>
<span class="line"><span>- 2023-01 month event name.</span></span>
<span class="line"><span>- 2023-01-02 event name with [link](https://github.com/hotoo/obsidian-markline).</span></span>
<span class="line"><span>## another group</span></span>
<span class="line"><span>- 2013 another list item.</span></span>
<span class="line"><span>- 2013-05-05 yet another list item.</span></span>
<span class="line"><span></span></span></code></pre>
</div>",
          "YankiNamespace": "Yanki Test - 4b7d855f1825e39f",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-fancy-markdown/syntax-highlighting.md",
      "filePathOriginal": "/test-fancy-markdown/syntax-highlighting.md",
      "note": {
        "deckName": "test-fancy-markdown",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>My code block has nice syntax highlighting.</p>
<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">export</span><span style="color:#D73A49;--shiki-dark:#F97583"> function</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> emptyIsUndefined</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">text</span><span style="color:#D73A49;--shiki-dark:#F97583">:</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="color:#D73A49;--shiki-dark:#F97583"> |</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span><span style="color:#D73A49;--shiki-dark:#F97583">:</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="color:#D73A49;--shiki-dark:#F97583"> |</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (text </span><span style="color:#D73A49;--shiki-dark:#F97583">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> undefined</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> text.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">trim</span><span style="color:#24292E;--shiki-dark:#E1E4E8">() </span><span style="color:#D73A49;--shiki-dark:#F97583">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> ''</span><span style="color:#D73A49;--shiki-dark:#F97583"> ?</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="color:#D73A49;--shiki-dark:#F97583"> :</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> text</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span></code></pre>
</div>",
          "YankiNamespace": "Yanki Test - 4b7d855f1825e39f",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-fancy-markdown/syntax-inline-only-front.md",
      "filePathOriginal": "/test-fancy-markdown/syntax-inline-only-front.md",
      "note": {
        "deckName": "test-fancy-markdown",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p><code>inline = true</code></p>
</div>",
          "YankiNamespace": "Yanki Test - 4b7d855f1825e39f",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-fancy-markdown/syntax-inline.md",
      "filePathOriginal": "/test-fancy-markdown/syntax-inline.md",
      "note": {
        "deckName": "test-fancy-markdown",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>My code has <code>inline = true</code> code syntax.</p>
</div>",
          "YankiNamespace": "Yanki Test - 4b7d855f1825e39f",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
  ],
}
`;

exports[`surplus frontmatter > preserves and merges unrelated surplus frontmatter 1`] = `
{
  "ankiWeb": false,
  "deletedDecks": [],
  "deletedMedia": [],
  "dryRun": false,
  "duration": 0,
  "namespace": "Yanki Test - ee8a558c89d868bf",
  "synced": [
    {
      "action": "created",
      "filePath": "/test-surplus-frontmatter/basic-with-irrelevent-frontmatter.md",
      "filePathOriginal": "/test-surplus-frontmatter/basic-with-irrelevent-frontmatter.md",
      "note": {
        "deckName": "test-surplus-frontmatter",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>I'm a note</p>
</div>",
          "YankiNamespace": "Yanki Test - ee8a558c89d868bf",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-surplus-frontmatter/basic-with-surplus-frontmatter.md",
      "filePathOriginal": "/test-surplus-frontmatter/basic-with-surplus-frontmatter.md",
      "note": {
        "deckName": "test-surplus-frontmatter",
        "fields": {
          "Back": "",
          "Front": "<!-- This HTML was generated by Yanki, a Markdown to Anki converter. Do not edit directly. -->
<div class="yanki namespace-yanki-test-HASH front model-yanki-basic">
<p>I'm a note</p>
</div>",
          "YankiNamespace": "Yanki Test - ee8a558c89d868bf",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
  ],
}
`;

exports[`surplus frontmatter > preserves and merges unrelated surplus frontmatter 2`] = `
[
  "yes",
  "no",
  "maybe",
]
`;

exports[`surplus frontmatter > preserves and merges unrelated surplus frontmatter 3`] = `"unrelated"`;

exports[`surplus frontmatter > preserves and merges unrelated surplus frontmatter 4`] = `
[
  "yes",
  "no",
  "maybe",
]
`;

exports[`surplus frontmatter > preserves and merges unrelated surplus frontmatter 5`] = `"unrelated"`;
