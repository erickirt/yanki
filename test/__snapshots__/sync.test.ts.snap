// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`basic synchronization > synchronizes notes to anki and has the correct deck name 1`] = `
{
  "ankiWeb": false,
  "deletedDecks": [],
  "dryRun": false,
  "duration": 0,
  "namespace": "Yanki Test - basic synchronization",
  "synced": [
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-and-reversed-card-with-no-back.md",
      "filePathOriginal": "/test-minimal-notes/basic-and-reversed-card-with-no-back.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<div class="yanki namespace-yanki-test-basic-synchronization back model-yanki-basic-and-reversed-card"><p><em>(Empty)</em></p></div>",
          "Front": "<div class="yanki namespace-yanki-test-basic-synchronization front model-yanki-basic-and-reversed-card"><p>I'm a <strong>question</strong> to which there is no answer.</p></div>",
          "YankiNamespace": "Yanki Test - basic synchronization",
        },
        "modelName": "Yanki - Basic (and reversed card)",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-and-reversed-card-with-no-front.md",
      "filePathOriginal": "/test-minimal-notes/basic-and-reversed-card-with-no-front.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<div class="yanki namespace-yanki-test-basic-synchronization back model-yanki-basic-and-reversed-card"><p>I'm an <strong>answer</strong> to which there is no question.</p></div>",
          "Front": "<div class="yanki namespace-yanki-test-basic-synchronization front model-yanki-basic-and-reversed-card"><p><em>(Empty)</em></p></div>",
          "YankiNamespace": "Yanki Test - basic synchronization",
        },
        "modelName": "Yanki - Basic (and reversed card)",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-and-reversed-card.md",
      "filePathOriginal": "/test-minimal-notes/basic-and-reversed-card.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<div class="yanki namespace-yanki-test-basic-synchronization back model-yanki-basic-and-reversed-card"><p>I'm an <strong>answer</strong> which is sometimes the question</p></div>",
          "Front": "<div class="yanki namespace-yanki-test-basic-synchronization front model-yanki-basic-and-reversed-card"><p>I'm <em>question</em> which is sometimes the answer</p></div>",
          "YankiNamespace": "Yanki Test - basic synchronization",
        },
        "modelName": "Yanki - Basic (and reversed card)",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-type-in-the-answer-with-empty-frontmatter.md",
      "filePathOriginal": "/test-minimal-notes/basic-type-in-the-answer-with-empty-frontmatter.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<div class="yanki namespace-yanki-test-basic-synchronization back model-yanki-basic-type-in-the-answer">I'm the thing you need to type on the card</div>",
          "Front": "<div class="yanki namespace-yanki-test-basic-synchronization front model-yanki-basic-type-in-the-answer"><p>I'm the prompt</p>
<p></p></div>",
          "YankiNamespace": "Yanki Test - basic synchronization",
        },
        "modelName": "Yanki - Basic (type in the answer)",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-type-in-the-answer-with-frontmatter.md",
      "filePathOriginal": "/test-minimal-notes/basic-type-in-the-answer-with-frontmatter.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<div class="yanki namespace-yanki-test-basic-synchronization back model-yanki-basic-type-in-the-answer">I'm the thing you need to type on the card</div>",
          "Front": "<div class="yanki namespace-yanki-test-basic-synchronization front model-yanki-basic-type-in-the-answer"><p>I'm the prompt</p>
<p></p></div>",
          "YankiNamespace": "Yanki Test - basic synchronization",
        },
        "modelName": "Yanki - Basic (type in the answer)",
        "noteId": 0,
        "tags": [
          "orange",
        ],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-type-in-the-answer-with-multiple-emphasis-and-ignored-answer-style.md",
      "filePathOriginal": "/test-minimal-notes/basic-type-in-the-answer-with-multiple-emphasis-and-ignored-answer-style.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<div class="yanki namespace-yanki-test-basic-synchronization back model-yanki-basic-type-in-the-answer">I'm the thing you <strong>need</strong> to type on the card</div>",
          "Front": "<div class="yanki namespace-yanki-test-basic-synchronization front model-yanki-basic-type-in-the-answer"><p>I'm the prompt</p>
<p><em>I'm actually also part of the prompt!</em>
</p></div>",
          "YankiNamespace": "Yanki Test - basic synchronization",
        },
        "modelName": "Yanki - Basic (type in the answer)",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-type-in-the-answer-with-multiple-emphasis.md",
      "filePathOriginal": "/test-minimal-notes/basic-type-in-the-answer-with-multiple-emphasis.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<div class="yanki namespace-yanki-test-basic-synchronization back model-yanki-basic-type-in-the-answer">I'm the thing you need to type on the card</div>",
          "Front": "<div class="yanki namespace-yanki-test-basic-synchronization front model-yanki-basic-type-in-the-answer"><p>I'm the prompt</p>
<p><em>I'm actually also part of the prompt!</em>
</p></div>",
          "YankiNamespace": "Yanki Test - basic synchronization",
        },
        "modelName": "Yanki - Basic (type in the answer)",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-type-in-the-answer.md",
      "filePathOriginal": "/test-minimal-notes/basic-type-in-the-answer.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<div class="yanki namespace-yanki-test-basic-synchronization back model-yanki-basic-type-in-the-answer">I'm the thing you need to type on the card</div>",
          "Front": "<div class="yanki namespace-yanki-test-basic-synchronization front model-yanki-basic-type-in-the-answer"><p>I'm the prompt</p>
<p></p></div>",
          "YankiNamespace": "Yanki Test - basic synchronization",
        },
        "modelName": "Yanki - Basic (type in the answer)",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-with-back-and-no-front-with-empty-frontmatter.md",
      "filePathOriginal": "/test-minimal-notes/basic-with-back-and-no-front-with-empty-frontmatter.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<div class="yanki namespace-yanki-test-basic-synchronization back model-yanki-basic"><p>I'm the back of the card</p>
<p>I have no front.</p></div>",
          "Front": "<div class="yanki namespace-yanki-test-basic-synchronization front model-yanki-basic"><p><em>(Empty)</em></p></div>",
          "YankiNamespace": "Yanki Test - basic synchronization",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-with-back-and-no-front.md",
      "filePathOriginal": "/test-minimal-notes/basic-with-back-and-no-front.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<div class="yanki namespace-yanki-test-basic-synchronization back model-yanki-basic"><p>I'm the back of the card</p>
<p>I have no front.</p></div>",
          "Front": "<div class="yanki namespace-yanki-test-basic-synchronization front model-yanki-basic"><p><em>(Empty)</em></p></div>",
          "YankiNamespace": "Yanki Test - basic synchronization",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-with-cloze-like-back-and-no-front.md",
      "filePathOriginal": "/test-minimal-notes/basic-with-cloze-like-back-and-no-front.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<div class="yanki namespace-yanki-test-basic-synchronization back model-yanki-basic"><p>This looks a lot like a <del>cloze</del> but it's a basic answer.</p></div>",
          "Front": "<div class="yanki namespace-yanki-test-basic-synchronization front model-yanki-basic"><p><em>(Empty)</em></p></div>",
          "YankiNamespace": "Yanki Test - basic synchronization",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-with-empty-everything.md",
      "filePathOriginal": "/test-minimal-notes/basic-with-empty-everything.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-basic-synchronization front model-yanki-basic"><p><em>(Empty)</em></p></div>",
          "YankiNamespace": "Yanki Test - basic synchronization",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-with-empty-frontmatter.md",
      "filePathOriginal": "/test-minimal-notes/basic-with-empty-frontmatter.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-basic-synchronization front model-yanki-basic"><p>My frontmatter is empty.</p></div>",
          "YankiNamespace": "Yanki Test - basic synchronization",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-with-front-and-cloze-like-back.md",
      "filePathOriginal": "/test-minimal-notes/basic-with-front-and-cloze-like-back.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<div class="yanki namespace-yanki-test-basic-synchronization back model-yanki-basic"><p>This looks a lot like a <del>cloze</del> or <del>two <em>here's a hint</em></del>.</p></div>",
          "Front": "<div class="yanki namespace-yanki-test-basic-synchronization front model-yanki-basic"><p>I'm the question</p></div>",
          "YankiNamespace": "Yanki Test - basic synchronization",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-with-front-and-no-back.md",
      "filePathOriginal": "/test-minimal-notes/basic-with-front-and-no-back.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-basic-synchronization front model-yanki-basic"><p>I'm the front of the card</p>
<p>I have no back.</p></div>",
          "YankiNamespace": "Yanki Test - basic synchronization",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-with-type-in-the-answer-like-back-and-no-front.md",
      "filePathOriginal": "/test-minimal-notes/basic-with-type-in-the-answer-like-back-and-no-front.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<div class="yanki namespace-yanki-test-basic-synchronization back model-yanki-basic"><p><em>I look a lot like the thing you need to type in, but i'm just a back-only emphasized note.</em></p></div>",
          "Front": "<div class="yanki namespace-yanki-test-basic-synchronization front model-yanki-basic"><p><em>(Empty)</em></p></div>",
          "YankiNamespace": "Yanki Test - basic synchronization",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-with-type-in-the-answer-like-front-and-no-back.md",
      "filePathOriginal": "/test-minimal-notes/basic-with-type-in-the-answer-like-front-and-no-back.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<div class="yanki namespace-yanki-test-basic-synchronization back model-yanki-basic"><p><em>(Empty)</em></p></div>",
          "Front": "<div class="yanki namespace-yanki-test-basic-synchronization front model-yanki-basic"><p><em>I look a lot like the thing you need to type in, but i'm just a front-only emphasized note.</em></p></div>",
          "YankiNamespace": "Yanki Test - basic synchronization",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-with-type-in-the-answer-like-single-line-with-empty-frontmatter.md",
      "filePathOriginal": "/test-minimal-notes/basic-with-type-in-the-answer-like-single-line-with-empty-frontmatter.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-basic-synchronization front model-yanki-basic"><p><em>I look a lot like the thing you need to type in, but i'm just a front-only emphasized note.</em></p></div>",
          "YankiNamespace": "Yanki Test - basic synchronization",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-with-type-in-the-answer-like-single-line-with-frontmatter.md",
      "filePathOriginal": "/test-minimal-notes/basic-with-type-in-the-answer-like-single-line-with-frontmatter.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-basic-synchronization front model-yanki-basic"><p><em>I look a lot like the thing you need to type in, but i'm just a front-only emphasized note.</em></p></div>",
          "YankiNamespace": "Yanki Test - basic synchronization",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [
          "orange",
        ],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic-with-type-in-the-answer-like-single-line.md",
      "filePathOriginal": "/test-minimal-notes/basic-with-type-in-the-answer-like-single-line.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-basic-synchronization front model-yanki-basic"><p><em>I look a lot like the thing you need to type in, but i'm just a front-only emphasized note.</em></p></div>",
          "YankiNamespace": "Yanki Test - basic synchronization",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/basic.md",
      "filePathOriginal": "/test-minimal-notes/basic.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<div class="yanki namespace-yanki-test-basic-synchronization back model-yanki-basic"><p>I'm the back of the card</p></div>",
          "Front": "<div class="yanki namespace-yanki-test-basic-synchronization front model-yanki-basic"><p>I'm the front of the card</p></div>",
          "YankiNamespace": "Yanki Test - basic synchronization",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/cloze-with-extra-empty.md",
      "filePathOriginal": "/test-minimal-notes/cloze-with-extra-empty.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-basic-synchronization front model-yanki-cloze"><p>This card has a {{c1::cloze}} or {{c2::two ::<em>here's a hint</em>}}.</p></div>",
          "YankiNamespace": "Yanki Test - basic synchronization",
        },
        "modelName": "Yanki - Cloze",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/cloze-with-extra.md",
      "filePathOriginal": "/test-minimal-notes/cloze-with-extra.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "<div class="yanki namespace-yanki-test-basic-synchronization back model-yanki-cloze"><p>And some extra stuff.</p></div>",
          "Front": "<div class="yanki namespace-yanki-test-basic-synchronization front model-yanki-cloze"><p>This card has a {{c1::cloze}} or {{c2::two ::<em>here's a hint</em>}}.</p></div>",
          "YankiNamespace": "Yanki Test - basic synchronization",
        },
        "modelName": "Yanki - Cloze",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/cloze-with-no-preamble.md",
      "filePathOriginal": "/test-minimal-notes/cloze-with-no-preamble.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-basic-synchronization front model-yanki-cloze"><p>{{c1::cloze}} is the {{c2::start of the card ::<em>here's a hint</em>}}.</p></div>",
          "YankiNamespace": "Yanki Test - basic synchronization",
        },
        "modelName": "Yanki - Cloze",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/cloze-with-nothing-else.md",
      "filePathOriginal": "/test-minimal-notes/cloze-with-nothing-else.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-basic-synchronization front model-yanki-cloze"><p>{{c1::a lonely cloze}}</p></div>",
          "YankiNamespace": "Yanki Test - basic synchronization",
        },
        "modelName": "Yanki - Cloze",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/cloze-with-style.md",
      "filePathOriginal": "/test-minimal-notes/cloze-with-style.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-basic-synchronization front model-yanki-cloze"><p>This card has a {{c1::<em>emphasized but un-hinted cloze</em>}} {{c2::<strong>cloze</strong> with style}} or {{c3::two}} and {{c4::plus another::<em>a really <strong>bold</strong> hint</em>}}.</p>
<p>{{c5::All}} will be {{c6::revealed ::<em>here's a hint: "shown"</em>}}.</p></div>",
          "YankiNamespace": "Yanki Test - basic synchronization",
        },
        "modelName": "Yanki - Cloze",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-minimal-notes/cloze.md",
      "filePathOriginal": "/test-minimal-notes/cloze.md",
      "note": {
        "deckName": "test-minimal-notes",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-basic-synchronization front model-yanki-cloze"><p>This card has a {{c1::cloze}} or {{c2::two ::<em>here's a hint</em>}}.</p></div>",
          "YankiNamespace": "Yanki Test - basic synchronization",
        },
        "modelName": "Yanki - Cloze",
        "noteId": 0,
        "tags": [],
      },
    },
  ],
}
`;

exports[`complex trees > makes the right decisions about deck naming with a file in the root 2`] = `
{
  "ankiWeb": false,
  "deletedDecks": [],
  "dryRun": false,
  "duration": 0,
  "namespace": "Yanki Test - complex trees",
  "synced": [
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-note/basic.md",
      "filePathOriginal": "/test-complex-tree-root-note/basic.md",
      "note": {
        "deckName": "test-complex-tree-root-note",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-complex-trees front model-yanki-basic"><p>I should be in the deck 'solo-note'</p></div>",
          "YankiNamespace": "Yanki Test - complex trees",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-note/deep-contiguous/basic.md",
      "filePathOriginal": "/test-complex-tree-root-note/deep-contiguous/basic.md",
      "note": {
        "deckName": "test-complex-tree-root-note::deep-contiguous",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-complex-trees front model-yanki-basic"><p>I should be in the deck 'deep-contiguous'</p></div>",
          "YankiNamespace": "Yanki Test - complex trees",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-note/deep-contiguous/within/basic.md",
      "filePathOriginal": "/test-complex-tree-root-note/deep-contiguous/within/basic.md",
      "note": {
        "deckName": "test-complex-tree-root-note::deep-contiguous::within",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-complex-trees front model-yanki-basic"><p>I should be in the deck 'another'</p></div>",
          "YankiNamespace": "Yanki Test - complex trees",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [
          "mdank",
          "yes",
        ],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-note/deep-contiguous/within/within/basic.md",
      "filePathOriginal": "/test-complex-tree-root-note/deep-contiguous/within/within/basic.md",
      "note": {
        "deckName": "test-complex-tree-root-note::deep-contiguous::within::within",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-complex-trees front model-yanki-basic"><p>I should be in the deck 'another'</p></div>",
          "YankiNamespace": "Yanki Test - complex trees",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [
          "mdank",
          "yes",
        ],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-note/deep-contiguous/within/within/within/basic.md",
      "filePathOriginal": "/test-complex-tree-root-note/deep-contiguous/within/within/within/basic.md",
      "note": {
        "deckName": "test-complex-tree-root-note::deep-contiguous::within::within::within",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-complex-trees front model-yanki-basic"><p>I should be in the deck 'within'</p></div>",
          "YankiNamespace": "Yanki Test - complex trees",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [
          "mdank",
          "yes",
        ],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-note/deep-island/within/within/within/basic.md",
      "filePathOriginal": "/test-complex-tree-root-note/deep-island/within/within/within/basic.md",
      "note": {
        "deckName": "test-complex-tree-root-note::deep-island::within::within::within",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-complex-trees front model-yanki-basic"><p>I should be in the deck 'within'</p></div>",
          "YankiNamespace": "Yanki Test - complex trees",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-note/deep-non-contiguous/within/within/basic.md",
      "filePathOriginal": "/test-complex-tree-root-note/deep-non-contiguous/within/within/basic.md",
      "note": {
        "deckName": "test-complex-tree-root-note::deep-non-contiguous::within::within",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-complex-trees front model-yanki-basic"><p>I should be in the deck 'within'</p></div>",
          "YankiNamespace": "Yanki Test - complex trees",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-note/sibling-folders/brother/basic.md",
      "filePathOriginal": "/test-complex-tree-root-note/sibling-folders/brother/basic.md",
      "note": {
        "deckName": "test-complex-tree-root-note::sibling-folders::brother",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-complex-trees front model-yanki-basic"><p>I should be in the deck 'brother'</p></div>",
          "YankiNamespace": "Yanki Test - complex trees",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [
          "mdank",
          "yes",
        ],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-note/sibling-folders/sister/basic.md",
      "filePathOriginal": "/test-complex-tree-root-note/sibling-folders/sister/basic.md",
      "note": {
        "deckName": "test-complex-tree-root-note::sibling-folders::sister",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-complex-trees front model-yanki-basic"><p>I should be in the deck 'sister'</p></div>",
          "YankiNamespace": "Yanki Test - complex trees",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [
          "mdank",
          "yes",
        ],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-note/solo-note/basic.md",
      "filePathOriginal": "/test-complex-tree-root-note/solo-note/basic.md",
      "note": {
        "deckName": "test-complex-tree-root-note::solo-note",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-complex-trees front model-yanki-basic"><p>I should be in the deck 'solo-note'</p></div>",
          "YankiNamespace": "Yanki Test - complex trees",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
  ],
}
`;

exports[`complex trees > makes the right decisions about deck naming without a file in the root 2`] = `
{
  "ankiWeb": false,
  "deletedDecks": [],
  "dryRun": false,
  "duration": 0,
  "namespace": "Yanki Test - complex trees",
  "synced": [
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-bare/deep-contiguous/basic.md",
      "filePathOriginal": "/test-complex-tree-root-bare/deep-contiguous/basic.md",
      "note": {
        "deckName": "deep-contiguous",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-complex-trees front model-yanki-basic"><p>I should be in the deck 'deep-contiguous'</p></div>",
          "YankiNamespace": "Yanki Test - complex trees",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-bare/deep-contiguous/within/basic.md",
      "filePathOriginal": "/test-complex-tree-root-bare/deep-contiguous/within/basic.md",
      "note": {
        "deckName": "deep-contiguous::within",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-complex-trees front model-yanki-basic"><p>I should be in the deck 'another'</p></div>",
          "YankiNamespace": "Yanki Test - complex trees",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [
          "mdank",
          "yes",
        ],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-bare/deep-contiguous/within/within/basic.md",
      "filePathOriginal": "/test-complex-tree-root-bare/deep-contiguous/within/within/basic.md",
      "note": {
        "deckName": "deep-contiguous::within::within",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-complex-trees front model-yanki-basic"><p>I should be in the deck 'another'</p></div>",
          "YankiNamespace": "Yanki Test - complex trees",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [
          "mdank",
          "yes",
        ],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-bare/deep-contiguous/within/within/within/basic.md",
      "filePathOriginal": "/test-complex-tree-root-bare/deep-contiguous/within/within/within/basic.md",
      "note": {
        "deckName": "deep-contiguous::within::within::within",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-complex-trees front model-yanki-basic"><p>I should be in the deck 'within'</p></div>",
          "YankiNamespace": "Yanki Test - complex trees",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [
          "mdank",
          "yes",
        ],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-bare/deep-island/within/within/within/basic.md",
      "filePathOriginal": "/test-complex-tree-root-bare/deep-island/within/within/within/basic.md",
      "note": {
        "deckName": "deep-island::within::within::within",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-complex-trees front model-yanki-basic"><p>I should be in the deck 'within'</p></div>",
          "YankiNamespace": "Yanki Test - complex trees",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-bare/deep-non-contiguous/within/within/basic.md",
      "filePathOriginal": "/test-complex-tree-root-bare/deep-non-contiguous/within/within/basic.md",
      "note": {
        "deckName": "deep-non-contiguous::within::within",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-complex-trees front model-yanki-basic"><p>I should be in the deck 'within'</p></div>",
          "YankiNamespace": "Yanki Test - complex trees",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-bare/sibling-folders/brother/basic.md",
      "filePathOriginal": "/test-complex-tree-root-bare/sibling-folders/brother/basic.md",
      "note": {
        "deckName": "sibling-folders::brother",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-complex-trees front model-yanki-basic"><p>I should be in the deck 'brother'</p></div>",
          "YankiNamespace": "Yanki Test - complex trees",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [
          "mdank",
          "yes",
        ],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-bare/sibling-folders/sister/basic.md",
      "filePathOriginal": "/test-complex-tree-root-bare/sibling-folders/sister/basic.md",
      "note": {
        "deckName": "sibling-folders::sister",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-complex-trees front model-yanki-basic"><p>I should be in the deck 'sister'</p></div>",
          "YankiNamespace": "Yanki Test - complex trees",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [
          "mdank",
          "yes",
        ],
      },
    },
    {
      "action": "created",
      "filePath": "/test-complex-tree-root-bare/solo-note/basic.md",
      "filePathOriginal": "/test-complex-tree-root-bare/solo-note/basic.md",
      "note": {
        "deckName": "solo-note",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-complex-trees front model-yanki-basic"><p>I should be in the deck 'solo-note'</p></div>",
          "YankiNamespace": "Yanki Test - complex trees",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
  ],
}
`;

exports[`duplicate node ids > handles duplicate node ids for notes with different content gracefully 1`] = `
{
  "ankiWeb": false,
  "deletedDecks": [],
  "dryRun": false,
  "duration": 0,
  "namespace": "Yanki Test - duplicate node ids",
  "synced": [
    {
      "action": "created",
      "filePath": "/test-duplicate-node-ids/basic.md",
      "filePathOriginal": "/test-duplicate-node-ids/basic.md",
      "note": {
        "deckName": "test-duplicate-node-ids",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-duplicate-node-ids front model-yanki-basic"><p>Replace me</p></div>",
          "YankiNamespace": "Yanki Test - duplicate node ids",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
  ],
}
`;

exports[`fancy markdown > handles fancy markdown 1`] = `
{
  "ankiWeb": false,
  "deletedDecks": [],
  "dryRun": false,
  "duration": 0,
  "namespace": "Yanki Test - fancy markdown",
  "synced": [
    {
      "action": "created",
      "filePath": "/test-fancy-markdown/autolinks.md",
      "filePathOriginal": "/test-fancy-markdown/autolinks.md",
      "note": {
        "deckName": "test-fancy-markdown",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-fancy-markdown front model-yanki-basic"><p><a href="https://ericmika.com">https://ericmika.com</a></p></div>",
          "YankiNamespace": "Yanki Test - fancy markdown",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-fancy-markdown/gfm-tables.md",
      "filePathOriginal": "/test-fancy-markdown/gfm-tables.md",
      "note": {
        "deckName": "test-fancy-markdown",
        "fields": {
          "Back": "<div class="yanki namespace-yanki-test-fancy-markdown back model-yanki-basic-and-reversed-card"><h2>2</h2>
<table>
<thead>
<tr>
<th align="center">abc</th>
<th align="right">bla</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">bar</td>
<td align="right">baz</td>
</tr>
</tbody>
</table>
<hr>
<h2>3</h2>
<table>
<thead>
<tr>
<th>abc</th>
<th>def</th>
</tr>
</thead>
<tbody>
<tr>
<td>bar</td>
<td>baz</td>
</tr>
</tbody>
</table>
<hr>
<h2>4</h2>
<table>
<thead>
<tr>
<th>abc</th>
<th>def</th>
</tr>
</thead>
</table>
<hr>
<p>And I'm the back</p></div>",
          "Front": "<div class="yanki namespace-yanki-test-fancy-markdown front model-yanki-basic-and-reversed-card"><h1>GFM Tables</h1>
<h2>1</h2>
<table>
<thead>
<tr>
<th>foo</th>
<th>bar</th>
</tr>
</thead>
<tbody>
<tr>
<td>baz</td>
<td>bim</td>
</tr>
</tbody>
</table></div>",
          "YankiNamespace": "Yanki Test - fancy markdown",
        },
        "modelName": "Yanki - Basic (and reversed card)",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-fancy-markdown/gh-admonitions.md",
      "filePathOriginal": "/test-fancy-markdown/gh-admonitions.md",
      "note": {
        "deckName": "test-fancy-markdown",
        "fields": {
          "Back": "<div class="yanki namespace-yanki-test-fancy-markdown back model-yanki-basic"><div class="admonition">
<p class="admonition-title">TIP</p>
<p>Nothing more</p>
</div>
<div class="admonition">
<p class="admonition-title">WARNING</p>
<p>I'm not liable</p>
</div></div>",
          "Front": "<div class="yanki namespace-yanki-test-fancy-markdown front model-yanki-basic"><div class="admonition">
<p class="admonition-title">CAUTION</p>
<p>Be careful</p>
</div>
<div class="admonition">
<p class="admonition-title">IMPORTANT</p>
<p>So, so important</p>
</div>
<div class="admonition">
<p class="admonition-title">NOTE</p>
<p>How meta</p>
</div></div>",
          "YankiNamespace": "Yanki Test - fancy markdown",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-fancy-markdown/highlights.md",
      "filePathOriginal": "/test-fancy-markdown/highlights.md",
      "note": {
        "deckName": "test-fancy-markdown",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-fancy-markdown front model-yanki-basic"><p>This note has a <mark class="flexible-marker flexible-marker-default">highlighted</mark> statement.</p></div>",
          "YankiNamespace": "Yanki Test - fancy markdown",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-fancy-markdown/images.md",
      "filePathOriginal": "/test-fancy-markdown/images.md",
      "note": {
        "deckName": "test-fancy-markdown",
        "fields": {
          "Back": "<div class="yanki namespace-yanki-test-fancy-markdown back model-yanki-basic-and-reversed-card"><p><img src="https://images.unsplash.com/photo-1574235664854-92e1da7d229a?crop=entropy&#x26;cs=tinysrgb&#x26;fit=crop&#x26;fm=jpg&#x26;h=800&#x26;ixid=MnwxfDB8MXxyYW5kb218MHx8Y2F0fHx8fHx8MTcxNzI5MjE0NQ&#x26;ixlib=rb-4.0.3&#x26;q=80&#x26;utm_campaign=api-credit&#x26;utm_medium=referral&#x26;utm_source=unsplash_source&#x26;w=800" alt="cat"></p></div>",
          "Front": "<div class="yanki namespace-yanki-test-fancy-markdown front model-yanki-basic-and-reversed-card"><p><img src="https://images.unsplash.com/photo-1555685812-4b943f1cb0eb?crop=entropy&#x26;cs=tinysrgb&#x26;fit=crop&#x26;fm=jpg&#x26;h=800&#x26;ixid=MnwxfDB8MXxyYW5kb218MHx8a2l0dGVufHx8fHx8MTcxNzI5MTk1OQ&#x26;ixlib=rb-4.0.3&#x26;q=80&#x26;utm_campaign=api-credit&#x26;utm_medium=referral&#x26;utm_source=unsplash_source&#x26;w=800" alt="kitten"></p></div>",
          "YankiNamespace": "Yanki Test - fancy markdown",
        },
        "modelName": "Yanki - Basic (and reversed card)",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-fancy-markdown/mathjax-fence.md",
      "filePathOriginal": "/test-fancy-markdown/mathjax-fence.md",
      "note": {
        "deckName": "test-fancy-markdown",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-fancy-markdown front model-yanki-basic"><p><strong>The Cauchy-Schwarz Inequality</strong></p>
<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.864ex;" xmlns="http://www.w3.org/2000/svg" width="34.485ex" height="7.27ex" role="img" focusable="false" viewBox="0 -1947.5 15242.4 3213.2" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-S4-28" d="M758 -1237T758 -1240T752 -1249H736Q718 -1249 717 -1248Q711 -1245 672 -1199Q237 -706 237 251T672 1700Q697 1730 716 1749Q718 1750 735 1750H752Q758 1744 758 1741Q758 1737 740 1713T689 1644T619 1537T540 1380T463 1176Q348 802 348 251Q348 -242 441 -599T744 -1218Q758 -1237 758 -1240Z"></path><path id="MJX-1-TEX-LO-2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path><path id="MJX-1-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-1-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-1-TEX-S4-29" d="M33 1741Q33 1750 51 1750H60H65Q73 1750 81 1743T119 1700Q554 1207 554 251Q554 -707 119 -1199Q76 -1250 66 -1250Q65 -1250 62 -1250T56 -1249Q55 -1249 53 -1249T49 -1250Q33 -1250 33 -1239Q33 -1236 50 -1214T98 -1150T163 -1052T238 -910T311 -727Q443 -335 443 251Q443 402 436 532T405 831T339 1142T224 1438T50 1716Q33 1737 33 1741Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-N-2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mrow"><g data-mml-node="mo" transform="translate(0 -0.5)"><use data-c="28" xlink:href="#MJX-1-TEX-S4-28"></use></g><g data-mml-node="munderover" transform="translate(792,0)"><g data-mml-node="mo"><use data-c="2211" xlink:href="#MJX-1-TEX-LO-2211"></use></g><g data-mml-node="TeXAtom" transform="translate(86,-1107.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D458" xlink:href="#MJX-1-TEX-I-1D458"></use></g><g data-mml-node="mo" transform="translate(521,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(1299,0)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g></g><g data-mml-node="mi" transform="translate(509.9,1150) scale(0.707)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g><g data-mml-node="msub" transform="translate(2402.7,0)"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><use data-c="1D458" xlink:href="#MJX-1-TEX-I-1D458"></use></g></g><g data-mml-node="msub" transform="translate(3383.1,0)"><g data-mml-node="mi"><use data-c="1D44F" xlink:href="#MJX-1-TEX-I-1D44F"></use></g><g data-mml-node="mi" transform="translate(462,-150) scale(0.707)"><use data-c="1D458" xlink:href="#MJX-1-TEX-I-1D458"></use></g></g><g data-mml-node="mo" transform="translate(4263.5,0) translate(0 -0.5)"><use data-c="29" xlink:href="#MJX-1-TEX-S4-29"></use></g></g><g data-mml-node="mn" transform="translate(5088.5,1476.6) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g><g data-mml-node="mo" transform="translate(5769.8,0)"><use data-c="2264" xlink:href="#MJX-1-TEX-N-2264"></use></g><g data-mml-node="mrow" transform="translate(6825.6,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><use data-c="28" xlink:href="#MJX-1-TEX-S4-28"></use></g><g data-mml-node="munderover" transform="translate(792,0)"><g data-mml-node="mo"><use data-c="2211" xlink:href="#MJX-1-TEX-LO-2211"></use></g><g data-mml-node="TeXAtom" transform="translate(86,-1107.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D458" xlink:href="#MJX-1-TEX-I-1D458"></use></g><g data-mml-node="mo" transform="translate(521,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(1299,0)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g></g><g data-mml-node="mi" transform="translate(509.9,1150) scale(0.707)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g><g data-mml-node="msubsup" transform="translate(2402.7,0)"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mn" transform="translate(562,413) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g><g data-mml-node="mi" transform="translate(562,-257.7) scale(0.707)"><use data-c="1D458" xlink:href="#MJX-1-TEX-I-1D458"></use></g></g><g data-mml-node="mo" transform="translate(3383.1,0) translate(0 -0.5)"><use data-c="29" xlink:href="#MJX-1-TEX-S4-29"></use></g></g><g data-mml-node="mrow" transform="translate(11167.3,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><use data-c="28" xlink:href="#MJX-1-TEX-S4-28"></use></g><g data-mml-node="munderover" transform="translate(792,0)"><g data-mml-node="mo"><use data-c="2211" xlink:href="#MJX-1-TEX-LO-2211"></use></g><g data-mml-node="TeXAtom" transform="translate(86,-1107.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D458" xlink:href="#MJX-1-TEX-I-1D458"></use></g><g data-mml-node="mo" transform="translate(521,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(1299,0)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g></g><g data-mml-node="mi" transform="translate(509.9,1150) scale(0.707)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g><g data-mml-node="msubsup" transform="translate(2402.7,0)"><g data-mml-node="mi"><use data-c="1D44F" xlink:href="#MJX-1-TEX-I-1D44F"></use></g><g data-mml-node="mn" transform="translate(462,413) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g><g data-mml-node="mi" transform="translate(462,-257.7) scale(0.707)"><use data-c="1D458" xlink:href="#MJX-1-TEX-I-1D458"></use></g></g><g data-mml-node="mo" transform="translate(3283.1,0) translate(0 -0.5)"><use data-c="29" xlink:href="#MJX-1-TEX-S4-29"></use></g></g></g></g></svg></mjx-container><style>
mjx-container[jax="SVG"] {
  direction: ltr;
}

mjx-container[jax="SVG"] > svg {
  overflow: visible;
  min-height: 1px;
  min-width: 1px;
}

mjx-container[jax="SVG"] > svg a {
  fill: blue;
  stroke: blue;
}

mjx-container[jax="SVG"][display="true"] {
  display: block;
  text-align: center;
  margin: 1em 0;
}

mjx-container[jax="SVG"][display="true"][width="full"] {
  display: flex;
}

mjx-container[jax="SVG"][justify="left"] {
  text-align: left;
}

mjx-container[jax="SVG"][justify="right"] {
  text-align: right;
}

g[data-mml-node="merror"] > g {
  fill: red;
  stroke: red;
}

g[data-mml-node="merror"] > rect[data-background] {
  fill: yellow;
  stroke: none;
}

g[data-mml-node="mtable"] > line[data-line], svg[data-table] > g > line[data-line] {
  stroke-width: 70px;
  fill: none;
}

g[data-mml-node="mtable"] > rect[data-frame], svg[data-table] > g > rect[data-frame] {
  stroke-width: 70px;
  fill: none;
}

g[data-mml-node="mtable"] > .mjx-dashed, svg[data-table] > g > .mjx-dashed {
  stroke-dasharray: 140;
}

g[data-mml-node="mtable"] > .mjx-dotted, svg[data-table] > g > .mjx-dotted {
  stroke-linecap: round;
  stroke-dasharray: 0,140;
}

g[data-mml-node="mtable"] > g > svg {
  overflow: visible;
}

[jax="SVG"] mjx-tool {
  display: inline-block;
  position: relative;
  width: 0;
  height: 0;
}

[jax="SVG"] mjx-tool > mjx-tip {
  position: absolute;
  top: 0;
  left: 0;
}

mjx-tool > mjx-tip {
  display: inline-block;
  padding: .2em;
  border: 1px solid #888;
  font-size: 70%;
  background-color: #F8F8F8;
  color: black;
  box-shadow: 2px 2px 5px #AAAAAA;
}

g[data-mml-node="maction"][data-toggle] {
  cursor: pointer;
}

mjx-status {
  display: block;
  position: fixed;
  left: 1em;
  bottom: 1em;
  min-width: 25%;
  padding: .2em .4em;
  border: 1px solid #888;
  font-size: 90%;
  background-color: #F8F8F8;
  color: black;
}

foreignObject[data-mjx-xml] {
  font-family: initial;
  line-height: normal;
  overflow: visible;
}

mjx-container[jax="SVG"] path[data-c], mjx-container[jax="SVG"] use[data-c] {
  stroke-width: 3;
}
</style></div>",
          "YankiNamespace": "Yanki Test - fancy markdown",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-fancy-markdown/obsidian-wiki-links.md",
      "filePathOriginal": "/test-fancy-markdown/obsidian-wiki-links.md",
      "note": {
        "deckName": "test-fancy-markdown",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-fancy-markdown front model-yanki-basic"><p>Let's link to Obsidian:</p>
<p><a href="obsidian://open?vault=Vault&#x26;file=Technology%20%E2%9A%99%EF%B8%8F%2FLanguages%2FTypeScript%2FTackling%20TypeScript%20Book%20Notes.md" title="Tackling TypeScript Book Notes">Tackling TypeScript Book Notes</a></p>
<p><a href="obsidian://open?vault=Vault&#x26;file=Technology%20%E2%9A%99%EF%B8%8F%2FLanguages%2FTypeScript%2FTypeScript%20Cheat%20Sheets%20Notes.md" title="TypeScript Cheat Sheets Notes">TypeScript Cheat Sheets Notes</a></p>
<p><a href="obsidian://open?vault=Vault&#x26;file=Technology%20%E2%9A%99%EF%B8%8F%2FLanguages%2FTypeScript%2FTypeScript%20Cheat%20Sheets%20Notes.md" title="Technology ⚙️/Languages/TypeScript/TypeScript Cheat Sheets Notes">Technology ⚙️/Languages/TypeScript/TypeScript Cheat Sheets Notes</a></p></div>",
          "YankiNamespace": "Yanki Test - fancy markdown",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
  ],
}
`;

exports[`surplus frontmatter > preserves and merges unrelated surplus frontmatter 1`] = `
{
  "ankiWeb": false,
  "deletedDecks": [],
  "dryRun": false,
  "duration": 0,
  "namespace": "Yanki Test - surplus frontmatter",
  "synced": [
    {
      "action": "created",
      "filePath": "/test-surplus-frontmatter/basic-with-irrelevent-frontmatter.md",
      "filePathOriginal": "/test-surplus-frontmatter/basic-with-irrelevent-frontmatter.md",
      "note": {
        "deckName": "test-surplus-frontmatter",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-surplus-frontmatter front model-yanki-basic"><p>I'm a note</p></div>",
          "YankiNamespace": "Yanki Test - surplus frontmatter",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
    {
      "action": "created",
      "filePath": "/test-surplus-frontmatter/basic-with-surplus-frontmatter.md",
      "filePathOriginal": "/test-surplus-frontmatter/basic-with-surplus-frontmatter.md",
      "note": {
        "deckName": "test-surplus-frontmatter",
        "fields": {
          "Back": "",
          "Front": "<div class="yanki namespace-yanki-test-surplus-frontmatter front model-yanki-basic"><p>I'm a note</p></div>",
          "YankiNamespace": "Yanki Test - surplus frontmatter",
        },
        "modelName": "Yanki - Basic",
        "noteId": 0,
        "tags": [],
      },
    },
  ],
}
`;

exports[`surplus frontmatter > preserves and merges unrelated surplus frontmatter 2`] = `
[
  "yes",
  "no",
  "maybe",
]
`;

exports[`surplus frontmatter > preserves and merges unrelated surplus frontmatter 3`] = `"unrelated"`;

exports[`surplus frontmatter > preserves and merges unrelated surplus frontmatter 4`] = `
[
  "yes",
  "no",
  "maybe",
]
`;

exports[`surplus frontmatter > preserves and merges unrelated surplus frontmatter 5`] = `"unrelated"`;
